//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace finder_ui.Group3ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contract", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class Contract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CounterpartIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CounterpartStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceOwnerIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceOwnerStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterpartId {
            get {
                return this.CounterpartIdField;
            }
            set {
                if ((this.CounterpartIdField.Equals(value) != true)) {
                    this.CounterpartIdField = value;
                    this.RaisePropertyChanged("CounterpartId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CounterpartStatus {
            get {
                return this.CounterpartStatusField;
            }
            set {
                if ((this.CounterpartStatusField.Equals(value) != true)) {
                    this.CounterpartStatusField = value;
                    this.RaisePropertyChanged("CounterpartStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceId {
            get {
                return this.ServiceIdField;
            }
            set {
                if ((this.ServiceIdField.Equals(value) != true)) {
                    this.ServiceIdField = value;
                    this.RaisePropertyChanged("ServiceId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceOwnerId {
            get {
                return this.ServiceOwnerIdField;
            }
            set {
                if ((this.ServiceOwnerIdField.Equals(value) != true)) {
                    this.ServiceOwnerIdField = value;
                    this.RaisePropertyChanged("ServiceOwnerId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceOwnerStatus {
            get {
                return this.ServiceOwnerStatusField;
            }
            set {
                if ((this.ServiceOwnerStatusField.Equals(value) != true)) {
                    this.ServiceOwnerStatusField = value;
                    this.RaisePropertyChanged("ServiceOwnerStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceType", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class ServiceType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceStatusType", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class ServiceStatusType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SubCategory", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class SubCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ParentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.Group3ServiceReference.Category ParentCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Parent {
            get {
                return this.ParentField;
            }
            set {
                if ((this.ParentField.Equals(value) != true)) {
                    this.ParentField = value;
                    this.RaisePropertyChanged("Parent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.Group3ServiceReference.Category ParentCategory {
            get {
                return this.ParentCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.ParentCategoryField, value) != true)) {
                    this.ParentCategoryField = value;
                    this.RaisePropertyChanged("ParentCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Titel {
            get {
                return this.TitelField;
            }
            set {
                if ((object.ReferenceEquals(this.TitelField, value) != true)) {
                    this.TitelField = value;
                    this.RaisePropertyChanged("Titel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Category", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class Category : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitelField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Titel {
            get {
                return this.TitelField;
            }
            set {
                if ((object.ReferenceEquals(this.TitelField, value) != true)) {
                    this.TitelField = value;
                    this.RaisePropertyChanged("Titel");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DateRange", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class DateRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> End {
            get {
                return this.EndField;
            }
            set {
                if ((this.EndField.Equals(value) != true)) {
                    this.EndField = value;
                    this.RaisePropertyChanged("End");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> Start {
            get {
                return this.StartField;
            }
            set {
                if ((this.StartField.Equals(value) != true)) {
                    this.StartField = value;
                    this.RaisePropertyChanged("Start");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PriceRange", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class PriceRange : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MaxField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double MinField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Max {
            get {
                return this.MaxField;
            }
            set {
                if ((this.MaxField.Equals(value) != true)) {
                    this.MaxField = value;
                    this.RaisePropertyChanged("Max");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Min {
            get {
                return this.MinField;
            }
            set {
                if ((this.MinField.Equals(value) != true)) {
                    this.MinField = value;
                    this.RaisePropertyChanged("Min");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Service", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class Service : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CreatorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ModifiedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.Group3ServiceReference.ServiceModifications ServiceModificationsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.Group3ServiceReference.ServiceStatus ServiceStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ServiceStatusIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.Group3ServiceReference.ServiceType ServiceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> StartDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.Group3ServiceReference.SubCategory SubCategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool TimeNeededField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int TypeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedTime {
            get {
                return this.CreatedTimeField;
            }
            set {
                if ((this.CreatedTimeField.Equals(value) != true)) {
                    this.CreatedTimeField = value;
                    this.RaisePropertyChanged("CreatedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CreatorID {
            get {
                return this.CreatorIDField;
            }
            set {
                if ((this.CreatorIDField.Equals(value) != true)) {
                    this.CreatorIDField = value;
                    this.RaisePropertyChanged("CreatorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Modified {
            get {
                return this.ModifiedField;
            }
            set {
                if ((this.ModifiedField.Equals(value) != true)) {
                    this.ModifiedField = value;
                    this.RaisePropertyChanged("Modified");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.Group3ServiceReference.ServiceModifications ServiceModifications {
            get {
                return this.ServiceModificationsField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceModificationsField, value) != true)) {
                    this.ServiceModificationsField = value;
                    this.RaisePropertyChanged("ServiceModifications");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.Group3ServiceReference.ServiceStatus ServiceStatus {
            get {
                return this.ServiceStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceStatusField, value) != true)) {
                    this.ServiceStatusField = value;
                    this.RaisePropertyChanged("ServiceStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ServiceStatusID {
            get {
                return this.ServiceStatusIDField;
            }
            set {
                if ((this.ServiceStatusIDField.Equals(value) != true)) {
                    this.ServiceStatusIDField = value;
                    this.RaisePropertyChanged("ServiceStatusID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.Group3ServiceReference.ServiceType ServiceType {
            get {
                return this.ServiceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceTypeField, value) != true)) {
                    this.ServiceTypeField = value;
                    this.RaisePropertyChanged("ServiceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.Group3ServiceReference.SubCategory SubCategory {
            get {
                return this.SubCategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.SubCategoryField, value) != true)) {
                    this.SubCategoryField = value;
                    this.RaisePropertyChanged("SubCategory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool TimeNeeded {
            get {
                return this.TimeNeededField;
            }
            set {
                if ((this.TimeNeededField.Equals(value) != true)) {
                    this.TimeNeededField = value;
                    this.RaisePropertyChanged("TimeNeeded");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceModifications", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class ServiceModifications : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ActionTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ActionTime {
            get {
                return this.ActionTimeField;
            }
            set {
                if ((this.ActionTimeField.Equals(value) != true)) {
                    this.ActionTimeField = value;
                    this.RaisePropertyChanged("ActionTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceStatus", Namespace="http://schemas.datacontract.org/2004/07/AnnonsService")]
    [System.SerializableAttribute()]
    public partial class ServiceStatus : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime FromDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.Group3ServiceReference.ServiceStatusType ServiceStatusTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StatusTypeIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ToDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime FromDate {
            get {
                return this.FromDateField;
            }
            set {
                if ((this.FromDateField.Equals(value) != true)) {
                    this.FromDateField = value;
                    this.RaisePropertyChanged("FromDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.Group3ServiceReference.ServiceStatusType ServiceStatusType {
            get {
                return this.ServiceStatusTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceStatusTypeField, value) != true)) {
                    this.ServiceStatusTypeField = value;
                    this.RaisePropertyChanged("ServiceStatusType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int StatusTypeID {
            get {
                return this.StatusTypeIDField;
            }
            set {
                if ((this.StatusTypeIDField.Equals(value) != true)) {
                    this.StatusTypeIDField = value;
                    this.RaisePropertyChanged("StatusTypeID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ToDate {
            get {
                return this.ToDateField;
            }
            set {
                if ((this.ToDateField.Equals(value) != true)) {
                    this.ToDateField = value;
                    this.RaisePropertyChanged("ToDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="Group3ServiceReference.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateContract", ReplyAction="http://tempuri.org/IService1/CreateContractResponse")]
        bool CreateContract(int serviceId, int counterpartId, int serviceOwnerId, int contractCreatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateContract", ReplyAction="http://tempuri.org/IService1/CreateContractResponse")]
        System.Threading.Tasks.Task<bool> CreateContractAsync(int serviceId, int counterpartId, int serviceOwnerId, int contractCreatorId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeContractStatus", ReplyAction="http://tempuri.org/IService1/ChangeContractStatusResponse")]
        bool ChangeContractStatus(int serviceId, int counterpartId, int serviceOwnerId, System.Nullable<int> serviceOwnerStatus, System.Nullable<int> counterpartStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeContractStatus", ReplyAction="http://tempuri.org/IService1/ChangeContractStatusResponse")]
        System.Threading.Tasks.Task<bool> ChangeContractStatusAsync(int serviceId, int counterpartId, int serviceOwnerId, System.Nullable<int> serviceOwnerStatus, System.Nullable<int> counterpartStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteContract", ReplyAction="http://tempuri.org/IService1/DeleteContractResponse")]
        bool DeleteContract(int serviceId, int counterpartId, int serviceOwnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteContract", ReplyAction="http://tempuri.org/IService1/DeleteContractResponse")]
        System.Threading.Tasks.Task<bool> DeleteContractAsync(int serviceId, int counterpartId, int serviceOwnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContract", ReplyAction="http://tempuri.org/IService1/GetContractResponse")]
        finder_ui.Group3ServiceReference.Contract GetContract(int serviceId, int counterpartId, int serviceOwnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContract", ReplyAction="http://tempuri.org/IService1/GetContractResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Contract> GetContractAsync(int serviceId, int counterpartId, int serviceOwnerId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypes", ReplyAction="http://tempuri.org/IService1/GetTypesResponse")]
        finder_ui.Group3ServiceReference.ServiceType[] GetTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetTypes", ReplyAction="http://tempuri.org/IService1/GetTypesResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.ServiceType[]> GetTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServiceStatusTypes", ReplyAction="http://tempuri.org/IService1/GetServiceStatusTypesResponse")]
        finder_ui.Group3ServiceReference.ServiceStatusType[] GetServiceStatusTypes();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServiceStatusTypes", ReplyAction="http://tempuri.org/IService1/GetServiceStatusTypesResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.ServiceStatusType[]> GetServiceStatusTypesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSubCategories", ReplyAction="http://tempuri.org/IService1/GetSubCategoriesResponse")]
        finder_ui.Group3ServiceReference.SubCategory[] GetSubCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSubCategories", ReplyAction="http://tempuri.org/IService1/GetSubCategoriesResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.SubCategory[]> GetSubCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCategories", ReplyAction="http://tempuri.org/IService1/GetCategoriesResponse")]
        finder_ui.Group3ServiceReference.Category[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetCategories", ReplyAction="http://tempuri.org/IService1/GetCategoriesResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Category[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateCategory", ReplyAction="http://tempuri.org/IService1/CreateCategoryResponse")]
        bool CreateCategory(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateCategory", ReplyAction="http://tempuri.org/IService1/CreateCategoryResponse")]
        System.Threading.Tasks.Task<bool> CreateCategoryAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditCategory", ReplyAction="http://tempuri.org/IService1/EditCategoryResponse")]
        bool EditCategory(int id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditCategory", ReplyAction="http://tempuri.org/IService1/EditCategoryResponse")]
        System.Threading.Tasks.Task<bool> EditCategoryAsync(int id, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCategory", ReplyAction="http://tempuri.org/IService1/DeleteCategoryResponse")]
        bool DeleteCategory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteCategory", ReplyAction="http://tempuri.org/IService1/DeleteCategoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteCategoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSubCategory", ReplyAction="http://tempuri.org/IService1/CreateSubCategoryResponse")]
        bool CreateSubCategory(int parentId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateSubCategory", ReplyAction="http://tempuri.org/IService1/CreateSubCategoryResponse")]
        System.Threading.Tasks.Task<bool> CreateSubCategoryAsync(int parentId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSubCategory", ReplyAction="http://tempuri.org/IService1/DeleteSubCategoryResponse")]
        bool DeleteSubCategory(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteSubCategory", ReplyAction="http://tempuri.org/IService1/DeleteSubCategoryResponse")]
        System.Threading.Tasks.Task<bool> DeleteSubCategoryAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditSubCategory", ReplyAction="http://tempuri.org/IService1/EditSubCategoryResponse")]
        bool EditSubCategory(int id, int parentId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditSubCategory", ReplyAction="http://tempuri.org/IService1/EditSubCategoryResponse")]
        System.Threading.Tasks.Task<bool> EditSubCategoryAsync(int id, int parentId, string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AdvancedSearch", ReplyAction="http://tempuri.org/IService1/AdvancedSearchResponse")]
        finder_ui.Group3ServiceReference.Service[] AdvancedSearch(finder_ui.Group3ServiceReference.DateRange createdTime, finder_ui.Group3ServiceReference.DateRange startDate, finder_ui.Group3ServiceReference.DateRange endDate, int creatorId, string title, string description, finder_ui.Group3ServiceReference.PriceRange price, int serviceStatusId, int[] serviceTypeIds, int[] subCategoryIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AdvancedSearch", ReplyAction="http://tempuri.org/IService1/AdvancedSearchResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> AdvancedSearchAsync(finder_ui.Group3ServiceReference.DateRange createdTime, finder_ui.Group3ServiceReference.DateRange startDate, finder_ui.Group3ServiceReference.DateRange endDate, int creatorId, string title, string description, finder_ui.Group3ServiceReference.PriceRange price, int serviceStatusId, int[] serviceTypeIds, int[] subCategoryIds);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoadServices", ReplyAction="http://tempuri.org/IService1/LoadServicesResponse")]
        finder_ui.Group3ServiceReference.Service[] LoadServices();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoadServices", ReplyAction="http://tempuri.org/IService1/LoadServicesResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> LoadServicesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search", ReplyAction="http://tempuri.org/IService1/SearchResponse")]
        finder_ui.Group3ServiceReference.Service[] Search(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Search", ReplyAction="http://tempuri.org/IService1/SearchResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> SearchAsync(string searchString);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllServiceData", ReplyAction="http://tempuri.org/IService1/GetAllServiceDataResponse")]
        finder_ui.Group3ServiceReference.Service[] GetAllServiceData();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetAllServiceData", ReplyAction="http://tempuri.org/IService1/GetAllServiceDataResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> GetAllServiceDataAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServiceById", ReplyAction="http://tempuri.org/IService1/GetServiceByIdResponse")]
        finder_ui.Group3ServiceReference.Service GetServiceById(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetServiceById", ReplyAction="http://tempuri.org/IService1/GetServiceByIdResponse")]
        System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service> GetServiceByIdAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateService", ReplyAction="http://tempuri.org/IService1/CreateServiceResponse")]
        bool CreateService(int type, int creatorId, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CreateService", ReplyAction="http://tempuri.org/IService1/CreateServiceResponse")]
        System.Threading.Tasks.Task<bool> CreateServiceAsync(int type, int creatorId, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditService", ReplyAction="http://tempuri.org/IService1/EditServiceResponse")]
        bool EditService(int id, int type, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EditService", ReplyAction="http://tempuri.org/IService1/EditServiceResponse")]
        System.Threading.Tasks.Task<bool> EditServiceAsync(int id, int type, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteService", ReplyAction="http://tempuri.org/IService1/DeleteServiceResponse")]
        bool DeleteService(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteService", ReplyAction="http://tempuri.org/IService1/DeleteServiceResponse")]
        System.Threading.Tasks.Task<bool> DeleteServiceAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsAlive", ReplyAction="http://tempuri.org/IService1/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/IsAlive", ReplyAction="http://tempuri.org/IService1/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : finder_ui.Group3ServiceReference.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<finder_ui.Group3ServiceReference.IService1>, finder_ui.Group3ServiceReference.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateContract(int serviceId, int counterpartId, int serviceOwnerId, int contractCreatorId) {
            return base.Channel.CreateContract(serviceId, counterpartId, serviceOwnerId, contractCreatorId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateContractAsync(int serviceId, int counterpartId, int serviceOwnerId, int contractCreatorId) {
            return base.Channel.CreateContractAsync(serviceId, counterpartId, serviceOwnerId, contractCreatorId);
        }
        
        public bool ChangeContractStatus(int serviceId, int counterpartId, int serviceOwnerId, System.Nullable<int> serviceOwnerStatus, System.Nullable<int> counterpartStatus) {
            return base.Channel.ChangeContractStatus(serviceId, counterpartId, serviceOwnerId, serviceOwnerStatus, counterpartStatus);
        }
        
        public System.Threading.Tasks.Task<bool> ChangeContractStatusAsync(int serviceId, int counterpartId, int serviceOwnerId, System.Nullable<int> serviceOwnerStatus, System.Nullable<int> counterpartStatus) {
            return base.Channel.ChangeContractStatusAsync(serviceId, counterpartId, serviceOwnerId, serviceOwnerStatus, counterpartStatus);
        }
        
        public bool DeleteContract(int serviceId, int counterpartId, int serviceOwnerId) {
            return base.Channel.DeleteContract(serviceId, counterpartId, serviceOwnerId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteContractAsync(int serviceId, int counterpartId, int serviceOwnerId) {
            return base.Channel.DeleteContractAsync(serviceId, counterpartId, serviceOwnerId);
        }
        
        public finder_ui.Group3ServiceReference.Contract GetContract(int serviceId, int counterpartId, int serviceOwnerId) {
            return base.Channel.GetContract(serviceId, counterpartId, serviceOwnerId);
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Contract> GetContractAsync(int serviceId, int counterpartId, int serviceOwnerId) {
            return base.Channel.GetContractAsync(serviceId, counterpartId, serviceOwnerId);
        }
        
        public finder_ui.Group3ServiceReference.ServiceType[] GetTypes() {
            return base.Channel.GetTypes();
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.ServiceType[]> GetTypesAsync() {
            return base.Channel.GetTypesAsync();
        }
        
        public finder_ui.Group3ServiceReference.ServiceStatusType[] GetServiceStatusTypes() {
            return base.Channel.GetServiceStatusTypes();
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.ServiceStatusType[]> GetServiceStatusTypesAsync() {
            return base.Channel.GetServiceStatusTypesAsync();
        }
        
        public finder_ui.Group3ServiceReference.SubCategory[] GetSubCategories() {
            return base.Channel.GetSubCategories();
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.SubCategory[]> GetSubCategoriesAsync() {
            return base.Channel.GetSubCategoriesAsync();
        }
        
        public finder_ui.Group3ServiceReference.Category[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Category[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public bool CreateCategory(string title) {
            return base.Channel.CreateCategory(title);
        }
        
        public System.Threading.Tasks.Task<bool> CreateCategoryAsync(string title) {
            return base.Channel.CreateCategoryAsync(title);
        }
        
        public bool EditCategory(int id, string title) {
            return base.Channel.EditCategory(id, title);
        }
        
        public System.Threading.Tasks.Task<bool> EditCategoryAsync(int id, string title) {
            return base.Channel.EditCategoryAsync(id, title);
        }
        
        public bool DeleteCategory(int id) {
            return base.Channel.DeleteCategory(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteCategoryAsync(int id) {
            return base.Channel.DeleteCategoryAsync(id);
        }
        
        public bool CreateSubCategory(int parentId, string title) {
            return base.Channel.CreateSubCategory(parentId, title);
        }
        
        public System.Threading.Tasks.Task<bool> CreateSubCategoryAsync(int parentId, string title) {
            return base.Channel.CreateSubCategoryAsync(parentId, title);
        }
        
        public bool DeleteSubCategory(int id) {
            return base.Channel.DeleteSubCategory(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteSubCategoryAsync(int id) {
            return base.Channel.DeleteSubCategoryAsync(id);
        }
        
        public bool EditSubCategory(int id, int parentId, string title) {
            return base.Channel.EditSubCategory(id, parentId, title);
        }
        
        public System.Threading.Tasks.Task<bool> EditSubCategoryAsync(int id, int parentId, string title) {
            return base.Channel.EditSubCategoryAsync(id, parentId, title);
        }
        
        public finder_ui.Group3ServiceReference.Service[] AdvancedSearch(finder_ui.Group3ServiceReference.DateRange createdTime, finder_ui.Group3ServiceReference.DateRange startDate, finder_ui.Group3ServiceReference.DateRange endDate, int creatorId, string title, string description, finder_ui.Group3ServiceReference.PriceRange price, int serviceStatusId, int[] serviceTypeIds, int[] subCategoryIds) {
            return base.Channel.AdvancedSearch(createdTime, startDate, endDate, creatorId, title, description, price, serviceStatusId, serviceTypeIds, subCategoryIds);
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> AdvancedSearchAsync(finder_ui.Group3ServiceReference.DateRange createdTime, finder_ui.Group3ServiceReference.DateRange startDate, finder_ui.Group3ServiceReference.DateRange endDate, int creatorId, string title, string description, finder_ui.Group3ServiceReference.PriceRange price, int serviceStatusId, int[] serviceTypeIds, int[] subCategoryIds) {
            return base.Channel.AdvancedSearchAsync(createdTime, startDate, endDate, creatorId, title, description, price, serviceStatusId, serviceTypeIds, subCategoryIds);
        }
        
        public finder_ui.Group3ServiceReference.Service[] LoadServices() {
            return base.Channel.LoadServices();
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> LoadServicesAsync() {
            return base.Channel.LoadServicesAsync();
        }
        
        public finder_ui.Group3ServiceReference.Service[] Search(string searchString) {
            return base.Channel.Search(searchString);
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> SearchAsync(string searchString) {
            return base.Channel.SearchAsync(searchString);
        }
        
        public finder_ui.Group3ServiceReference.Service[] GetAllServiceData() {
            return base.Channel.GetAllServiceData();
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service[]> GetAllServiceDataAsync() {
            return base.Channel.GetAllServiceDataAsync();
        }
        
        public finder_ui.Group3ServiceReference.Service GetServiceById(int id) {
            return base.Channel.GetServiceById(id);
        }
        
        public System.Threading.Tasks.Task<finder_ui.Group3ServiceReference.Service> GetServiceByIdAsync(int id) {
            return base.Channel.GetServiceByIdAsync(id);
        }
        
        public bool CreateService(int type, int creatorId, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId) {
            return base.Channel.CreateService(type, creatorId, serviceStatusId, picture, title, description, price, startDate, endDate, timeNeeded, subCategoryId);
        }
        
        public System.Threading.Tasks.Task<bool> CreateServiceAsync(int type, int creatorId, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId) {
            return base.Channel.CreateServiceAsync(type, creatorId, serviceStatusId, picture, title, description, price, startDate, endDate, timeNeeded, subCategoryId);
        }
        
        public bool EditService(int id, int type, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId) {
            return base.Channel.EditService(id, type, serviceStatusId, picture, title, description, price, startDate, endDate, timeNeeded, subCategoryId);
        }
        
        public System.Threading.Tasks.Task<bool> EditServiceAsync(int id, int type, int serviceStatusId, string picture, string title, string description, double price, System.Nullable<System.DateTime> startDate, System.Nullable<System.DateTime> endDate, bool timeNeeded, int subCategoryId) {
            return base.Channel.EditServiceAsync(id, type, serviceStatusId, picture, title, description, price, startDate, endDate, timeNeeded, subCategoryId);
        }
        
        public bool DeleteService(int id) {
            return base.Channel.DeleteService(id);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteServiceAsync(int id) {
            return base.Channel.DeleteServiceAsync(id);
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
    }
}
