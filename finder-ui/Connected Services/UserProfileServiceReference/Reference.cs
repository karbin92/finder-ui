//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace finder_ui.UserProfileServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="NewUser", Namespace="http://schemas.datacontract.org/2004/07/TSB100UserProfileService.DataTransferObje" +
        "cts")]
    [System.SerializableAttribute()]
    public partial class NewUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/TSB100UserProfileService.DataTransferObje" +
        "cts")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AccountStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> PersonalCodeNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhonenumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private finder_ui.UserProfileServiceReference.Review[] ReviewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SurnameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UsernameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> ZipCodeField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AccountStatus {
            get {
                return this.AccountStatusField;
            }
            set {
                if ((this.AccountStatusField.Equals(value) != true)) {
                    this.AccountStatusField = value;
                    this.RaisePropertyChanged("AccountStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Address {
            get {
                return this.AddressField;
            }
            set {
                if ((object.ReferenceEquals(this.AddressField, value) != true)) {
                    this.AddressField = value;
                    this.RaisePropertyChanged("Address");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> PersonalCodeNumber {
            get {
                return this.PersonalCodeNumberField;
            }
            set {
                if ((this.PersonalCodeNumberField.Equals(value) != true)) {
                    this.PersonalCodeNumberField = value;
                    this.RaisePropertyChanged("PersonalCodeNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phonenumber {
            get {
                return this.PhonenumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PhonenumberField, value) != true)) {
                    this.PhonenumberField = value;
                    this.RaisePropertyChanged("Phonenumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public finder_ui.UserProfileServiceReference.Review[] Review {
            get {
                return this.ReviewField;
            }
            set {
                if ((object.ReferenceEquals(this.ReviewField, value) != true)) {
                    this.ReviewField = value;
                    this.RaisePropertyChanged("Review");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Surname {
            get {
                return this.SurnameField;
            }
            set {
                if ((object.ReferenceEquals(this.SurnameField, value) != true)) {
                    this.SurnameField = value;
                    this.RaisePropertyChanged("Surname");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Username {
            get {
                return this.UsernameField;
            }
            set {
                if ((object.ReferenceEquals(this.UsernameField, value) != true)) {
                    this.UsernameField = value;
                    this.RaisePropertyChanged("Username");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> ZipCode {
            get {
                return this.ZipCodeField;
            }
            set {
                if ((this.ZipCodeField.Equals(value) != true)) {
                    this.ZipCodeField = value;
                    this.RaisePropertyChanged("ZipCode");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Review", Namespace="http://schemas.datacontract.org/2004/07/TSB100UserProfileService.DataTransferObje" +
        "cts")]
    [System.SerializableAttribute()]
    public partial class Review : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="UserProfileServiceReference.IUserProfileService")]
    public interface IUserProfileService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/CreateUser", ReplyAction="http://tempuri.org/IUserProfileService/CreateUserResponse")]
        finder_ui.UserProfileServiceReference.User CreateUser(finder_ui.UserProfileServiceReference.NewUser newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/CreateUser", ReplyAction="http://tempuri.org/IUserProfileService/CreateUserResponse")]
        System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User> CreateUserAsync(finder_ui.UserProfileServiceReference.NewUser newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/UpdateUser", ReplyAction="http://tempuri.org/IUserProfileService/UpdateUserResponse")]
        bool UpdateUser(finder_ui.UserProfileServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/UpdateUser", ReplyAction="http://tempuri.org/IUserProfileService/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(finder_ui.UserProfileServiceReference.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/DeleteUserProfile", ReplyAction="http://tempuri.org/IUserProfileService/DeleteUserProfileResponse")]
        bool DeleteUserProfile(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/DeleteUserProfile", ReplyAction="http://tempuri.org/IUserProfileService/DeleteUserProfileResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserProfileAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/DeleteUser", ReplyAction="http://tempuri.org/IUserProfileService/DeleteUserResponse")]
        bool DeleteUser(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/DeleteUser", ReplyAction="http://tempuri.org/IUserProfileService/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/UserIdExistsInProfile", ReplyAction="http://tempuri.org/IUserProfileService/UserIdExistsInProfileResponse")]
        bool UserIdExistsInProfile(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/UserIdExistsInProfile", ReplyAction="http://tempuri.org/IUserProfileService/UserIdExistsInProfileResponse")]
        System.Threading.Tasks.Task<bool> UserIdExistsInProfileAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/EmailExistsInProfile", ReplyAction="http://tempuri.org/IUserProfileService/EmailExistsInProfileResponse")]
        bool EmailExistsInProfile(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/EmailExistsInProfile", ReplyAction="http://tempuri.org/IUserProfileService/EmailExistsInProfileResponse")]
        System.Threading.Tasks.Task<bool> EmailExistsInProfileAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/UserNameExistsInProfile", ReplyAction="http://tempuri.org/IUserProfileService/UserNameExistsInProfileResponse")]
        bool UserNameExistsInProfile(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/UserNameExistsInProfile", ReplyAction="http://tempuri.org/IUserProfileService/UserNameExistsInProfileResponse")]
        System.Threading.Tasks.Task<bool> UserNameExistsInProfileAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetAllUsers", ReplyAction="http://tempuri.org/IUserProfileService/GetAllUsersResponse")]
        finder_ui.UserProfileServiceReference.User[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetAllUsers", ReplyAction="http://tempuri.org/IUserProfileService/GetAllUsersResponse")]
        System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetUserByUserNameOrEmail", ReplyAction="http://tempuri.org/IUserProfileService/GetUserByUserNameOrEmailResponse")]
        finder_ui.UserProfileServiceReference.User GetUserByUserNameOrEmail(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetUserByUserNameOrEmail", ReplyAction="http://tempuri.org/IUserProfileService/GetUserByUserNameOrEmailResponse")]
        System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User> GetUserByUserNameOrEmailAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetUserByUserId", ReplyAction="http://tempuri.org/IUserProfileService/GetUserByUserIdResponse")]
        finder_ui.UserProfileServiceReference.User GetUserByUserId(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetUserByUserId", ReplyAction="http://tempuri.org/IUserProfileService/GetUserByUserIdResponse")]
        System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User> GetUserByUserIdAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetLatestLog", ReplyAction="http://tempuri.org/IUserProfileService/GetLatestLogResponse")]
        string GetLatestLog();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/GetLatestLog", ReplyAction="http://tempuri.org/IUserProfileService/GetLatestLogResponse")]
        System.Threading.Tasks.Task<string> GetLatestLogAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/IsAlive", ReplyAction="http://tempuri.org/IUserProfileService/IsAliveResponse")]
        bool IsAlive();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserProfileService/IsAlive", ReplyAction="http://tempuri.org/IUserProfileService/IsAliveResponse")]
        System.Threading.Tasks.Task<bool> IsAliveAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserProfileServiceChannel : finder_ui.UserProfileServiceReference.IUserProfileService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserProfileServiceClient : System.ServiceModel.ClientBase<finder_ui.UserProfileServiceReference.IUserProfileService>, finder_ui.UserProfileServiceReference.IUserProfileService {
        
        public UserProfileServiceClient() {
        }
        
        public UserProfileServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserProfileServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserProfileServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserProfileServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public finder_ui.UserProfileServiceReference.User CreateUser(finder_ui.UserProfileServiceReference.NewUser newUser) {
            return base.Channel.CreateUser(newUser);
        }
        
        public System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User> CreateUserAsync(finder_ui.UserProfileServiceReference.NewUser newUser) {
            return base.Channel.CreateUserAsync(newUser);
        }
        
        public bool UpdateUser(finder_ui.UserProfileServiceReference.User user) {
            return base.Channel.UpdateUser(user);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(finder_ui.UserProfileServiceReference.User user) {
            return base.Channel.UpdateUserAsync(user);
        }
        
        public bool DeleteUserProfile(int userId) {
            return base.Channel.DeleteUserProfile(userId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserProfileAsync(int userId) {
            return base.Channel.DeleteUserProfileAsync(userId);
        }
        
        public bool DeleteUser(int userId) {
            return base.Channel.DeleteUser(userId);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(int userId) {
            return base.Channel.DeleteUserAsync(userId);
        }
        
        public bool UserIdExistsInProfile(int userId) {
            return base.Channel.UserIdExistsInProfile(userId);
        }
        
        public System.Threading.Tasks.Task<bool> UserIdExistsInProfileAsync(int userId) {
            return base.Channel.UserIdExistsInProfileAsync(userId);
        }
        
        public bool EmailExistsInProfile(string email) {
            return base.Channel.EmailExistsInProfile(email);
        }
        
        public System.Threading.Tasks.Task<bool> EmailExistsInProfileAsync(string email) {
            return base.Channel.EmailExistsInProfileAsync(email);
        }
        
        public bool UserNameExistsInProfile(string userName) {
            return base.Channel.UserNameExistsInProfile(userName);
        }
        
        public System.Threading.Tasks.Task<bool> UserNameExistsInProfileAsync(string userName) {
            return base.Channel.UserNameExistsInProfileAsync(userName);
        }
        
        public finder_ui.UserProfileServiceReference.User[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public finder_ui.UserProfileServiceReference.User GetUserByUserNameOrEmail(string username) {
            return base.Channel.GetUserByUserNameOrEmail(username);
        }
        
        public System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User> GetUserByUserNameOrEmailAsync(string username) {
            return base.Channel.GetUserByUserNameOrEmailAsync(username);
        }
        
        public finder_ui.UserProfileServiceReference.User GetUserByUserId(int userId) {
            return base.Channel.GetUserByUserId(userId);
        }
        
        public System.Threading.Tasks.Task<finder_ui.UserProfileServiceReference.User> GetUserByUserIdAsync(int userId) {
            return base.Channel.GetUserByUserIdAsync(userId);
        }
        
        public string GetLatestLog() {
            return base.Channel.GetLatestLog();
        }
        
        public System.Threading.Tasks.Task<string> GetLatestLogAsync() {
            return base.Channel.GetLatestLogAsync();
        }
        
        public bool IsAlive() {
            return base.Channel.IsAlive();
        }
        
        public System.Threading.Tasks.Task<bool> IsAliveAsync() {
            return base.Channel.IsAliveAsync();
        }
    }
}
